# Generated by Django 4.1.1 on 2022-12-28 17:01

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Calendar_Meetings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("leader_id", models.SmallIntegerField(verbose_name="ID лидера")),
                ("curator_id", models.SmallIntegerField(verbose_name="ID куратора")),
                (
                    "other_leader_id",
                    models.SmallIntegerField(verbose_name="ID другого лидера"),
                ),
                (
                    "time",
                    models.CharField(
                        max_length=20, verbose_name="Дата и время встречи с куратором"
                    ),
                ),
                (
                    "meet",
                    models.CharField(
                        max_length=255, verbose_name="Место встречи с куратором"
                    ),
                ),
                ("description", models.TextField(verbose_name="Описание")),
                (
                    "status",
                    models.CharField(max_length=5, verbose_name="Статус встречи"),
                ),
                (
                    "who_sent",
                    models.CharField(max_length=10, verbose_name="Кто отправил"),
                ),
            ],
            options={
                "verbose_name": "Две похожих таблицы",
                "verbose_name_plural": "Две похожих таблицы",
            },
        ),
        migrations.CreateModel(
            name="Curator_Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("curator_id", models.SmallIntegerField(verbose_name="ID куратора")),
                ("leader_id", models.SmallIntegerField(verbose_name="ID лидера")),
            ],
            options={
                "verbose_name": "Команда и ее куратор",
                "verbose_name_plural": "Команды и ее куратор",
            },
        ),
        migrations.CreateModel(
            name="Denial_Application",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("student_id", models.SmallIntegerField(verbose_name="ID студента")),
                ("description", models.TextField(verbose_name="Описание")),
            ],
            options={
                "verbose_name": "Отказ",
                "verbose_name_plural": "Отказы",
            },
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_id",
                    models.SmallIntegerField(
                        blank=True, verbose_name="ID пользователя"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True, upload_to="images/%Y/%m/%d/", verbose_name="Фото"
                    ),
                ),
            ],
            options={
                "verbose_name": "Фотография",
                "verbose_name_plural": "Фотографии",
            },
        ),
        migrations.CreateModel(
            name="Leader_Request",
            fields=[
                (
                    "user_id",
                    models.SmallIntegerField(
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID пользователя",
                    ),
                ),
                ("fio", models.CharField(max_length=60, verbose_name="ФИО")),
            ],
            options={
                "verbose_name": "Заявка лидера на подтверждение",
                "verbose_name_plural": "Заявки лидеров на подтверждение",
            },
        ),
        migrations.CreateModel(
            name="Request_Join_Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("leader_id", models.SmallIntegerField(verbose_name="ID лидера")),
                ("student_id", models.SmallIntegerField(verbose_name="ID студента")),
                (
                    "who_sent",
                    models.CharField(
                        max_length=10, verbose_name="Кто отправил приглошение"
                    ),
                ),
            ],
            options={
                "verbose_name": "Заявка от лидера/студента на вступление в команду",
                "verbose_name_plural": "Заявки от лидера/студента на вступление в команду",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "leader_id",
                    models.SmallIntegerField(
                        primary_key=True, serialize=False, verbose_name="Лидер команды"
                    ),
                ),
                ("number", models.SmallIntegerField(verbose_name="Номер команды")),
                (
                    "teammates",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Напарники"
                    ),
                ),
                (
                    "themes",
                    models.CharField(
                        max_length=50, null=True, verbose_name="Тема команды"
                    ),
                ),
                (
                    "description_themes",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Описание темы команды"
                    ),
                ),
                (
                    "url_space",
                    models.URLField(
                        null=True, verbose_name="Ссылка на рабочее пространство"
                    ),
                ),
                (
                    "max_amount",
                    models.SmallIntegerField(
                        verbose_name="Максимальное кол-во людей в команде"
                    ),
                ),
                (
                    "customer",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Заказчик команды"
                    ),
                ),
            ],
            options={
                "verbose_name": "Команда",
                "verbose_name_plural": "Команды",
            },
        ),
        migrations.CreateModel(
            name="User_No_Team",
            fields=[
                (
                    "user_id",
                    models.SmallIntegerField(
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID пользователя",
                    ),
                ),
                ("fio", models.CharField(max_length=60, verbose_name="ФИО")),
            ],
            options={
                "verbose_name": "Пользователь без команды",
                "verbose_name_plural": "Пользователи без команды",
            },
        ),
        migrations.CreateModel(
            name="User_Skills",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_id",
                    models.SmallIntegerField(
                        blank=True, verbose_name="ID пользователя"
                    ),
                ),
                ("leader", models.BooleanField(verbose_name="Лидер")),
                (
                    "role_skill",
                    models.CharField(
                        max_length=10, verbose_name="Роль пользователя данная моделью"
                    ),
                ),
                (
                    "team_management_s",
                    models.BooleanField(
                        verbose_name="Управление командой и процессами"
                    ),
                ),
                (
                    "negotitation_s",
                    models.BooleanField(verbose_name="Ведение переговоров"),
                ),
                (
                    "resoinsibility_s",
                    models.BooleanField(verbose_name="Ответственность"),
                ),
                (
                    "organization_s",
                    models.BooleanField(verbose_name="Организованность"),
                ),
                (
                    "log_think_s",
                    models.BooleanField(verbose_name="Логическое мышление"),
                ),
                (
                    "abstrat_think_s",
                    models.BooleanField(verbose_name="Абстрактное мышление"),
                ),
                ("creativity_s", models.BooleanField(verbose_name="Креативность")),
                (
                    "stress_resist_s",
                    models.BooleanField(verbose_name="Стрессоустойчивость"),
                ),
                (
                    "analyt_skill_s",
                    models.BooleanField(verbose_name="Аналитические навыки"),
                ),
                (
                    "fast_learn_s",
                    models.BooleanField(verbose_name="Быстрая обучаемость и гибкость"),
                ),
                (
                    "ability_develop_s",
                    models.BooleanField(verbose_name="Способность к саморазвитию"),
                ),
                (
                    "sociability_s",
                    models.BooleanField(verbose_name="Коммуникабельность"),
                ),
                (
                    "customer_focus_s",
                    models.BooleanField(verbose_name="Клиентоориентированность"),
                ),
                (
                    "serach_info_s",
                    models.BooleanField(
                        verbose_name="Умение быстро и эффективно искать информацию в авторитетных источника"
                    ),
                ),
                (
                    "work_team_s",
                    models.BooleanField(verbose_name="Умение работать в команде"),
                ),
                (
                    "html_css_f",
                    models.BooleanField(
                        verbose_name="Языки верстки web-страниц HTML и CSS;"
                    ),
                ),
                (
                    "js_f",
                    models.BooleanField(
                        verbose_name="Знание языка программирования JavaScript"
                    ),
                ),
                (
                    "reg_ang_vue_f",
                    models.BooleanField(
                        verbose_name="Знание JavaScript-фреймворков (React, Angular, Vue.js)"
                    ),
                ),
                ("ts_f", models.BooleanField(verbose_name="Знание TypeScript")),
                ("jquery_f", models.BooleanField(verbose_name="Знание jQuery")),
                (
                    "git_f",
                    models.BooleanField(
                        verbose_name="Знание инструментов контроля версий Git"
                    ),
                ),
                (
                    "server_lang_b",
                    models.BooleanField(
                        verbose_name="Знание «серверного» языка программирования: PHP, Go, ASP.NET, C/C++, Python, Ruby, Java"
                    ),
                ),
                (
                    "sql_b",
                    models.BooleanField(
                        verbose_name="Знание SQL, принципов работы с базой данных"
                    ),
                ),
                (
                    "pret_bd_b",
                    models.BooleanField(
                        verbose_name="Навыки проектирования баз данных"
                    ),
                ),
                ("api_b", models.BooleanField(verbose_name="Знание API")),
                (
                    "unit_test_b",
                    models.BooleanField(
                        verbose_name="Навыки написания юнит-тестов и покрытия кода тестами"
                    ),
                ),
                (
                    "solid_b",
                    models.BooleanField(
                        verbose_name="Понимание и навык использования SOLID-принципов"
                    ),
                ),
                (
                    "creative_skills_d",
                    models.BooleanField(verbose_name="Владение творческими навыками"),
                ),
                (
                    "prototype_d",
                    models.BooleanField(
                        verbose_name="Навык создания прототипов экранов"
                    ),
                ),
                (
                    "typography_d",
                    models.BooleanField(verbose_name="Знание основ типографики"),
                ),
                ("draw_skills_d", models.BooleanField(verbose_name="Навыки рисования")),
                (
                    "photoshop_d",
                    models.BooleanField(verbose_name="Навык использования Photoshop"),
                ),
                (
                    "adobe_d",
                    models.BooleanField(
                        verbose_name="Навык использования Adobe XD, Adobe Illustrator"
                    ),
                ),
                ("figma_d", models.BooleanField(verbose_name="Навык работы с Figma")),
                ("sketch_d", models.BooleanField(verbose_name="Навык работы с Sketch")),
                (
                    "color_sience_d",
                    models.BooleanField(
                        verbose_name="Знание основ колористики и цветоведения"
                    ),
                ),
            ],
            options={
                "verbose_name": "User Skills",
                "verbose_name_plural": "User Skills",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_id",
                    models.AutoField(
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID пользователя",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Admin"),
                            ("STUDENT", "Student"),
                            ("TEACHER", "Teacher"),
                            ("LEADER", "Leader"),
                        ],
                        max_length=50,
                        verbose_name="Роль",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Почта"
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True, upload_to="photos/%Y/%m/%d/", verbose_name="Фото"
                    ),
                ),
                ("first_name", models.CharField(max_length=30, verbose_name="Имя")),
                ("last_name", models.CharField(max_length=15, verbose_name="Фамилия")),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="Имя пользователя",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TeacherProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.CharField(blank=True, max_length=10, verbose_name="Группа"),
                ),
                (
                    "desc",
                    models.TextField(blank=True, null=True, verbose_name="Описание"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("PersonalArea.user",),
            managers=[
                ("student", django.db.models.manager.Manager()),
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("PersonalArea.user",),
            managers=[
                ("teacher", django.db.models.manager.Manager()),
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
